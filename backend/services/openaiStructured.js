/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI Structured Outputs
 * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∂—ë—Å—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ JSON-—Å—Ö–µ–º–µ
 */

const OpenAI = require('openai');
const { resumeEvaluationSchema } = require('../schemas/resumeEvaluation');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Structured Outputs
 * @param {string} resumeText - –¢–µ–∫—Å—Ç —Ä–µ–∑—é–º–µ
 * @param {Object} evidence - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –æ–ø—ã—Ç–µ
 * @returns {Object} –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—é–º–µ
 */
async function evaluateResumeStructured(resumeText, evidence = {}) {
  try {
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenAI —Å Structured Outputs...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === 'your-openai-api-key-here') {
      throw new Error('OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    const { systemPrompt, userPrompt } = require('../prompts/apiResumeReview');
    
    const messages = [
      {
        role: 'system',
        content: systemPrompt
      },
      {
        role: 'user',
        content: userPrompt(resumeText, evidence)
      }
    ];

    const response = await openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
      messages,
      temperature: 0.2,
      top_p: 1,
      seed: 42, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
      max_tokens: 1500,
      response_format: {
        type: "json_schema",
        json_schema: {
          name: "ResumeMintEvaluation",
          schema: resumeEvaluationSchema,
          strict: true
        }
      }
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let evaluation;
    try {
      evaluation = JSON.parse(content);
    } catch (parseError) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
      console.error('–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç:', content);
      throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏');
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:');
    console.log(`  –ì—Ä–µ–π–¥: ${evaluation.grade?.level || 'Unknown'}`);
    console.log(`  –û—Ü–µ–Ω–∫–∏: text=${evaluation.scores?.text}, structure=${evaluation.scores?.structure}, overall=${evaluation.scores?.overall}`);
    console.log(`  ATS: ${evaluation.ats?.score}`);
    console.log(`  –¢–æ–∫–µ–Ω—ã: ${response.usage?.prompt_tokens}/${response.usage?.completion_tokens}`);
    console.log(`  –ú–æ–¥–µ–ª—å: ${response.model}`);
    console.log(`  System fingerprint: ${response.system_fingerprint}`);

    return {
      evaluation,
      raw_model_output: content,
      usage: response.usage,
      model: response.model,
      system_fingerprint: response.system_fingerprint,
      meta: {
        model: response.model,
        temperature: 0.2,
        seed: 42,
        ts: new Date().toISOString()
      }
    };

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–µ–∑—é–º–µ:', error.message);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    return {
      evaluation: {
        grade: {
          level: "Unknown",
          reason: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ"
        },
        scores: {
          text: null,
          structure: null,
          overall: null
        },
        strengths: ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ"],
        gaps: ["–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –∞–Ω–∞–ª–∏–∑–∞"],
        add: ["–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"],
        questions: ["–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—é–º–µ?"]
      },
      error: error.message,
      raw_model_output: null,
      usage: null,
      model: null,
      system_fingerprint: null,
      meta: {
        model: null,
        temperature: 0.2,
        seed: 42,
        ts: new Date().toISOString()
      }
    };
  }
}

module.exports = { evaluateResumeStructured };
